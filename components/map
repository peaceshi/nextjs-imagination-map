import * as React from "react";
import { ReactElement, useCallback, useState } from "react";
import DeckGL from "@deck.gl/react";
import { StaticMap } from "react-map-gl";
import { isMobile } from "react-device-detect";
import { QD1_STYLE, QD_STYLE, Teyvat_STYLE } from "../lib/styles";
import { LineLayer, MapView, OrthographicView } from "deck.gl";

const MAX_BOUNDS = [
  [0, -79.17],
  [135, 0]
];

export const isOutOfMaxBounds = (longitude: number, latitude: number, maxBounds: typeof MAX_BOUNDS): boolean => {
  const [[swLng, swLat], [neLng, neLat]] = maxBounds;
  return longitude < swLng || longitude > neLng || latitude < swLat || latitude > neLat;
};

const eventRecognizerOptions = isMobile
  ? {
      pan: { threshold: 10 },
      tap: { threshold: 5 }
    }
  : {
      pan: { threshold: 10 },
      tap: { threshold: 2 }
    };
const INITIAL_VIEW_STATE = {
  longitude: 90,
  latitude: -45,
  zoom: 4,
  bearing: 0,
  maxZoom: 7,
  minZoom: 3
};

const data = [{ position: [90, -45], size: 100 }];
export default function Map({ index }: { index: number }): ReactElement {
  const [viewState, setViewState] = useState(INITIAL_VIEW_STATE);
  const view = new MapView({ id: "teyvat" });
  const layer = new LineLayer({
    id: "line-layer",
    data: [
      {
        inbound: 72633,
        outbound: 74735,
        from: {
          name: "19th St. Oakland (19TH)",
          coordinates: [0, 0]
        },
        to: {
          name: "12th St. Oakland City Center (12TH)",
          coordinates: [135.271604, -60.803664]
        }
      }
    ],
    pickable: true,
    getWidth: 50,
    getSourcePosition: (d) => d.from.coordinates,
    getTargetPosition: (d) => d.to.coordinates,
    getColor: (d) => [Math.sqrt(d.inbound + d.outbound), 140, 0]
  });
  // const [viewState, setViewState] = useState({
  //   longitude: 90,
  //   latitude: -45,
  //   zoom: 4,
  //   bearing: 0,
  //   maxZoom: 7,
  //   minZoom: 3
  // });
  const onViewStateChange = useCallback((viewState, oldViewState) => {
    if (!isOutOfMaxBounds(viewState.longitude, viewState.latitude, MAX_BOUNDS)) {
      setViewState(viewState);
    } else {
      setViewState(viewState);
    }
  }, []);
  return (
    <DeckGL
      views={[view]}
      layers={[layer]}
      // initialViewState={INITIAL_VIEW_STATE}
      viewState={viewState}
      onViewStateChange={onViewStateChange}
      controller={true}
      glOptions={{
        // Tell browser to use discrete GPU if available
        powerPreference: "high-performance"
      }}
      useDevicePixels={false}
    >
      {index == 0 ? (
        <StaticMap mapStyle={Teyvat_STYLE} reuseMaps={true} />
      ) : index == 1 ? (
        <StaticMap mapStyle={QD_STYLE} reuseMaps={true} />
      ) : index == 2 ? (
        <StaticMap mapStyle={QD1_STYLE} reuseMaps={true} />
      ) : null}
    </DeckGL>
  );
}
